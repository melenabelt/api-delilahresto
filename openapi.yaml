openapi: 3.0.1
info:
  title: Delilah Resto - Rest API for Ac√°mica
  description: This API is about a restaurant which have users, orders and  products.
    All permissions depend on whether or not the user is an administrator
  version: 1.0.0
externalDocs:
  description: Find out more about this REST API
  url:
servers:
- url: https://virtserver.swaggerhub.com/melenabelt/Delilah_Resto_ElenaCorrea/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:8081/api/v1
tags:
- name: users
  description: User's information and actions
- name: products
  description: Product's information and actions
- name: orders
  description: Order's information and actions
paths:
  /users:
    post:
      tags:
      - users
      summary: Create a new user
      description: Create a user as long as the username and email do not exist
      operationId: createUser
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Successful login
        "400":
          description: Bad request
          content: {}
        "401":
          description: Bad credentials
          content: {}
        "409":
          description: Resource already exists
          content: {}
      x-codegen-request-body-name: body
  /users/login:
    post:
      tags:
      - users
      summary: Login to a user
      description: The user can log in as long as he or she has already created a
        user with a username or e-mail address. When the user is created, a token
        is generated, which must be inserted in "auth-token" inside the Postman Header
        for the product and order endpoints.
      operationId: loginUser
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Successful login
        "400":
          description: Bad request
          content: {}
        "401":
          description: Bad credentials
          content: {}
      x-codegen-request-body-name: body
  /products:
    get:
      tags:
      - products
      summary: Get all products
      description: Returns all products. You must send the token in the "auth-token"
        of the Header inside Postman.
      operationId: getAllProducts
      parameters:
      - name: auth-token
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - products
      summary: Create a new product
      description: To create a new product, the logged-in user must be an administrator.
        The previously generated token must be included in "auth-token" within the
        Postman Header.
      operationId: createProduct
      parameters:
      - name: auth-token
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
          content: {}
      x-codegen-request-body-name: body
  /products/{id}:
    put:
      tags:
      - products
      summary: Update a product
      description: To update products you must be logged in as an administrator, that's
        why you must send the token in the "auth-token" of the Header inside Postman.
      operationId: updateProduct
      parameters:
      - name: auth-token
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: Product id to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
          content: {}
        "404":
          description: Resource does not exist
          content: {}
    delete:
      tags:
      - products
      summary: Delete a product
      description: To delete a product you must be logged in as an administrator,
        that's why you must send the token in the "auth-token" of the Header inside
        Postman.
      operationId: deleteProduct
      parameters:
      - name: auth-token
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: Product id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Resource removed successfully
        "400":
          description: Bad request
          content: {}
        "404":
          description: Resource does not exist
          content: {}
  /orders:
    get:
      tags:
      - orders
      summary: Get all orders
      description: Administrators will be able to see all the orders created by all
        users, while the normal user will be able to see only theirs. For this to
        work the token must be inserted in the "auth-token" field inside the Postman
        Header.
      operationId: getAllOrders
      parameters:
      - name: auth-token
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
          content: {}
      x-codegen-request-body-name: body
    post:
      tags:
      - orders
      summary: Create a new order
      description: To create an order along with its details, you first validate that
        the product exists. If it does not exist, it throws an error, if it does,
        the order is created successfully.
      operationId: createOrder
      parameters:
      - name: auth-token
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
          content: {}
      x-codegen-request-body-name: body
  /orders/{id}:
    get:
      tags:
      - orders
      summary: Get an order by id
      description: If you are an administrator, you can enter the id of any order
        to see its details, but if you are a normal user you will only be able to
        see yours. For this to work the token must be inserted in the "auth-token"
        field inside the Postman Header.
      operationId: getAnOrder
      parameters:
      - name: auth-token
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: Order id to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
          content: {}
      x-codegen-request-body-name: body
    put:
      tags:
      - orders
      summary: Update an order
      description: Only administrators can update orders. For this to work the token
        must be inserted in the "auth-token" field inside the Postman Header.
      operationId: updateOrder
      parameters:
      - name: auth-token
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: Order id to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderStatus'
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
          content: {}
        "404":
          description: Resource does not exist
          content: {}
    delete:
      tags:
      - orders
      summary: Delete an order and their details
      description: Only administrators can delete orders and their details. For this
        to work the token must be inserted in the "auth-token" field inside the Postman
        Header.
      operationId: deleteOrder
      parameters:
      - name: auth-token
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: id
        in: path
        description: Order id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Resource removed successfully
        "400":
          description: Bad request
          content: {}
        "404":
          description: Resource does not exist
          content: {}
components:
  schemas:
    Product:
      required:
      - description
      - price
      type: object
      properties:
        description:
          type: string
          example: Sushi
        price:
          type: integer
          format: int64
          example: 25000
      xml:
        name: Product
    ProductOrder:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          format: int64
          example: 1
      xml:
        name: Order
    User:
      required:
      - cellphone
      - email
      - fullname
      - password
      - shippingAddress
      - username
      type: object
      properties:
        email:
          type: string
          example: melenabelt@delilahresto.com
        password:
          type: string
          example: Myp455w0rd!
        username:
          type: string
          example: melenabelt
        fullname:
          type: string
          example: Melena Belt
        cellphone:
          type: string
          example: +57 3001234567
        shippingAddress:
          type: string
          example: Avenida Siempre Viva
        roleId:
          type: integer
          format: int64
          example: 2
      xml:
        name: User
    Order:
      type: object
      properties:
        paymentMethodId:
          type: integer
          format: int64
          example: 1
        products:
          type: array
          xml:
            name: product
            wrapped: true
          items:
            $ref: '#/components/schemas/ProductOrder'
      xml:
        name: Order
    OrderStatus:
      type: object
      properties:
        statusId:
          type: integer
          format: int64
          example: 1
      xml:
        name: Order
  securitySchemes:
    apiKey:
      type: apiKey
      name: auth-token
      in: header
